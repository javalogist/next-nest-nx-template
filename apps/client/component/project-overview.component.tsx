// apps/client/components/ProjectOverview.tsx
'use client';

import {
  Card,
  Group,
  Text,
  ThemeIcon,
  SimpleGrid,
  Modal,
  Button,
  Divider,
  Space,
} from '@mantine/core';
import {
  IconFolder,
  IconPackage,
  IconFiles,
  IconSettings,
  IconBrandGithub,
  IconLock,
  IconFileText,
  IconCode,
  IconJson,
} from '@tabler/icons-react';
import { useState } from 'react';
import { ProjectItem } from '../models/project-item.model';

// const projectData: ProjectItem[] = [
//   {
//     title: 'apps',
//     description: 'Contains Next.js and NestJS applications.',
//     details: `
// 📁 apps/
// ├── client/ → Next.js application (frontend)
// │   ├── app/ → App router, pages, and layouts
// │   ├── components/ → App-specific components
// │   ├── public/ → Assets like images
// │   ├── middleware.ts → Middleware for API routes
// │   └── next-build-standalone.js → Standalone build script
// └── service/ → NestJS application (backend)
//     ├── src/ → Application modules and configuration
//     └── main.ts → Application entry point
//     `,
//     icon: <IconFolder size={24} />,
//   },
//   {
//     title: 'libs',
//     description: 'Shared libraries between Next.js and NestJS apps.',
//     details: `
// 📁 libs/
// ├── server/ → Common server-side code for NestJS apps
// │   ├── config/ → CORS, JWT, MongoDB, Swagger, etc.
// │   ├── decorators/ → Custom NestJS decorators
// │   ├── dtos/ → DTOs for data validation
// │   ├── exceptions/ → Exception handling services
// │   ├── guards/ → Auth guards (JWT, roles)
// │   ├── middleware/ → Middleware utilities
// │   └── utils/ → Helper functions
// └── common/ → Shared models and API utilities
//     ├── api-response-model/ → Consistent API response models
//     ├── api.client.ts → API client for Next.js
//     └── api-util.ts → Utility functions for API calls
//     `,
//     icon: <IconPackage size={24} />,
//   },
//   {
//     title: 'dist',
//     description: 'Output directory for built applications.',
//     details: `
// 📁 dist/
// ├── client/ → Built Next.js application
// └── service/ → Built NestJS application
//     `,
//     icon: <IconFiles size={24} />,
//   },
//   {
//     title: '.nx',
//     description: 'NX workspace configuration and cache.',
//     details: `
// 📁 .nx/
// ├── cache/ → NX cache to improve build performance
// └── workspace.json → NX workspace configuration
//     `,
//     icon: <IconSettings size={24} />,
//   },
//   {
//     title: '.idea',
//     description: 'IDE-specific settings for WebStorm/IntelliJ.',
//     details: `
// 📁 .idea/
// ├── project settings
// └── IDE metadata files
//     `,
//     icon: <IconBrandGithub size={24} />,
//   },
//   {
//     title: 'node_modules',
//     description: 'Dependencies installed from package.json.',
//     details: `
// 📁 node_modules/
// ├── All npm dependencies for the project
// └── Auto-generated by npm/yarn install
//     `,
//     icon: <IconPackage size={24} />,
//   },
//   {
//     title: '.gitignore',
//     description: 'Specifies files and folders to ignore in Git.',
//     details: `
// 📄 .gitignore
// # Ignore build output, node_modules, and sensitive files.
//     `,
//     icon: <IconLock size={24} />,
//   },
//   {
//     title: 'package.json',
//     description: 'Project dependencies and scripts.',
//     details: `
// 📄 package.json
// {
//   "name": "next-nest-nx-template",
//   "version": "1.0.0",
//   "scripts": {
//     "build": "nx run-many --target=build",
//     "dev": "nx run-many --target=serve",
//     "lint": "nx run-many --target=lint"
//   }
// }
//     `,
//     icon: <IconFileText size={24} />,
//   },
//   {
//     title: 'tsconfig.base.json',
//     description: 'Base TypeScript configuration for NX.',
//     details: `
// 📄 tsconfig.base.json
// # Base configuration for all apps and libs.
//     `,
//     icon: <IconCode size={24} />,
//   },
//   {
//     title: 'nx.json',
//     description: 'NX configuration for workspace setup.',
//     details: `
// 📄 nx.json
// {
//   "npmScope": "next-nest",
//   "affected": {
//     "defaultBase": "main"
//   }
// }
//     `,
//     icon: <IconJson size={24} />,
//   },
// ];

const projectData: ProjectItem[] = [
  {
    title: 'apps',
    description: 'Contains Next.js and NestJS applications.',
    details: `
📁 apps/
├── client/ → Next.js application (frontend)
│   ├── app/ → App router, pages, and layouts
│   ├── components/ → App-specific components
│   ├── public/ → Static assets like images
│   ├── middleware.ts → Middleware for API routes
│   └── next-build-standalone.js → Standalone build script
└── service/ → NestJS application (backend)
    ├── src/ → Application modules and configuration
    └── main.ts → Application entry point
    `,
    icon: <IconFolder size={24} />,
  },
  {
    title: 'libs',
    description: 'Shared libraries between Next.js and NestJS apps.',
    details: `
📁 libs/
├── server/ → Common server-side code for NestJS apps
│   ├── config/ → CORS, JWT, MongoDB, Swagger, etc.
│   ├── decorators/ → Custom NestJS decorators
│   ├── dtos/ → DTOs for data validation
│   ├── exceptions/ → Exception handling services
│   ├── guards/ → Auth guards (JWT, roles)
│   ├── middleware/ → Middleware utilities
│   └── utils/ → Helper functions
└── common/ → Shared models and API utilities
    ├── api-response-model/ → Consistent API response models
    ├── api.client.ts → API client for Next.js
    └── api-util.ts → Utility functions for API calls
    `,
    icon: <IconPackage size={24} />,
  },
  {
    title: 'dist',
    description: 'Output directory for built applications.',
    details: `
📁 dist/
├── client/ → Built Next.js application
└── service/ → Built NestJS application
    `,
    icon: <IconFiles size={24} />,
  },
  {
    title: '.nx',
    description: 'NX workspace configuration and cache.',
    details: `
📁 .nx/
├── cache/ → NX cache to improve build performance
└── workspace.json → NX workspace configuration
    `,
    icon: <IconSettings size={24} />,
  },
  {
    title: '.idea',
    description: 'IDE-specific settings for WebStorm/IntelliJ.',
    details: `
📁 .idea/
├── project settings
└── IDE metadata files
    `,
    icon: <IconBrandGithub size={24} />,
  },
  {
    title: 'node_modules',
    description: 'Dependencies installed from package.json.',
    details: `
📁 node_modules/
├── All npm dependencies for the project
└── Auto-generated by npm/yarn install
    `,
    icon: <IconPackage size={24} />,
  },
  {
    title: '.gitignore',
    description: 'Specifies files and folders to ignore in Git.',
    details: `
📄 .gitignore
# Ignore build output, node_modules, and sensitive files.
    `,
    icon: <IconLock size={24} />,
  },
  {
    title: '.nvmrc',
    description: 'Specifies the Node.js version to use.',
    details: `
📄 .nvmrc
# Node.js version used for the project.
    `,
    icon: <IconCode size={24} />,
  },
  {
    title: '.prettierignore',
    description: 'Files and directories ignored by Prettier.',
    details: `
📄 .prettierignore
# Ignore files from being formatted by Prettier.
    `,
    icon: <IconFileText size={24} />,
  },
  {
    title: '.prettierrc',
    description: 'Prettier configuration file.',
    details: `
📄 .prettierrc
# Configuration for Prettier formatting.
    `,
    icon: <IconFileText size={24} />,
  },
  {
    title: 'eslint.config.mjs',
    description: 'ESLint configuration for code quality.',
    details: `
📄 eslint.config.mjs
# ESLint configuration for linting.
    `,
    icon: <IconCode size={24} />,
  },
  {
    title: 'nx.json',
    description: 'NX configuration for workspace setup.',
    details: `
📄 nx.json
{
  "npmScope": "next-nest",
  "affected": {
    "defaultBase": "main"
  }
}
    `,
    icon: <IconJson size={24} />,
  },
  {
    title: 'package.json',
    description: 'Project dependencies and scripts.',
    details: `
📄 package.json
{
  "name": "next-nest-nx-template",
  "version": "1.0.0",
  "scripts": {
    "build": "nx run-many --target=build",
    "dev": "nx run-many --target=serve",
    "lint": "nx run-many --target=lint"
  }
}
    `,
    icon: <IconFileText size={24} />,
  },
  {
    title: 'package-lock.json',
    description: 'Lock file to ensure consistent dependency versions.',
    details: `
📄 package-lock.json
# Auto-generated lock file with dependency versions.
    `,
    icon: <IconLock size={24} />,
  },
  {
    title: 'README.md',
    description: 'Project documentation and guidelines.',
    details: `
📄 README.md
# Documentation for the project.
    `,
    icon: <IconFileText size={24} />,
  },
  {
    title: 'text.txt',
    description: 'Sample text file for reference.',
    details: `
📄 text.txt
# Sample file for text content.
    `,
    icon: <IconFileText size={24} />,
  },
  {
    title: 'tsconfig.base.json',
    description: 'Base TypeScript configuration for NX.',
    details: `
📄 tsconfig.base.json
# Base configuration for all apps and libs.
    `,
    icon: <IconCode size={24} />,
  },
];

export default function ProjectOverview() {
  const [modalData, setModalData] = useState<ProjectItem | null>(null);

  return (
    <>
      <SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="lg">
        {projectData.map((item, index) => (
          <Card
            key={index}
            shadow="sm"
            padding="lg"
            radius="md"
            withBorder
            onClick={() => setModalData(item)}
            style={{
              cursor: 'pointer',
              transition: 'transform 0.2s ease-in-out',
            }}
            onMouseEnter={(e) =>
              (e.currentTarget.style.transform = 'scale(1.05)')
            }
            onMouseLeave={(e) => (e.currentTarget.style.transform = 'scale(1)')}
          >
            <Group>
              <ThemeIcon color="blue" size="lg" radius="md">
                {item.icon}
              </ThemeIcon>
              <Text size="lg" fw={500}>
                {item.title}
              </Text>
            </Group>
            <Text size="sm" c="dimmed" mt="sm">
              {item.description}
            </Text>
          </Card>
        ))}
      </SimpleGrid>

      {/* Modal for showing details */}
      <Modal
        opened={!!modalData}
        onClose={() => setModalData(null)}
        title={
          <Text size="lg" fw={700}>
            {modalData?.title} Details
          </Text>
        }
        size="lg"
      >
        <Divider mb="md" />
        <pre
          style={{
            padding: '12px',
            borderRadius: '5px',
            whiteSpace: 'pre-wrap',
          }}
        >
          {modalData?.details}
        </pre>
        <Space h="md" />
        <Button
          variant="light"
          color="blue"
          fullWidth
          onClick={() => setModalData(null)}
        >
          Close
        </Button>
      </Modal>
    </>
  );
}
